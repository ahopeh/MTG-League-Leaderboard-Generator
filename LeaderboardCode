import pandas as pd
import numpy as np

def calculate_leaderboard(excel_path):
    # Load data
    df = pd.read_excel(excel_path)
    
    # Constants
    MIN_GAMES = 15
    PENALTY_MULTIPLIER = 3
    
    # Calculate max possible individual scores if not provided
    if 'max_individual_possible' not in df.columns:
        df['max_individual_possible'] = df['individual_games_played'] * 4  # Default 4-player pods
    
    # Detect draft events dynamically
    draft_events = sorted(set(col.split('_')[1] for col in df.columns 
                            if col.startswith('draft_') and col.split('_')[1].isdigit()))
    
    def process_player(row):
        # Individual games
        games_played = row['individual_games_played']
        indiv_score = row['individual_points']
        max_indiv = row['max_individual_possible']
        
        penalty = max(0, MIN_GAMES - games_played) * PENALTY_MULTIPLIER
        grinder_bonus = indiv_score / df['max_individual_possible'].max()
        
        # Draft calculations
        draft_total = 0
        max_draft = 0
        drafts_attended = 0
        undefeated_rounds = 0
        
        for event in draft_events:
            if pd.notna(row.get(f'draft_{event}', np.nan)):
                rounds = row.get(f'draft_{event}_rounds', 0)
                wins = row.get(f'draft_{event}_wins', 0)
                losses = row.get(f'draft_{event}_losses', 0)
                ur = row.get(f'draft_{event}_undefeated', 0)
                
                # Track undefeated rounds
                undefeated_rounds += ur
                
                # Calculate points
                event_points = 10  # Participation
                event_points += wins * 4
                event_points += losses * 2
                event_points += ur * 3  # Undefeated round bonus
                
                if row.get(f'draft_{event}_clean_sweep', False):
                    event_points += 10  # Clean sweep bonus
                
                if row.get(f'draft_{event}_bye', False):
                    event_points += 4  # Bye = free win
                
                draft_total += event_points
                drafts_attended += 1
                
                # Max possible for this event
                max_event = 10 + (rounds * 4) + (rounds * 3)
                if rounds >= 3:
                    max_event += 10  # Clean sweep possible
                max_draft += max_event
        
        # Calculate components
        indiv_component = (indiv_score - penalty) / max_indiv if max_indiv > 0 else 0
        draft_component = draft_total / max_draft if max_draft > 0 else 0
        
        # Your exact formula
        draft_bonus = draft_component * (0.1 + 0.07 * drafts_attended) * undefeated_rounds
        final_score = indiv_component + draft_component + grinder_bonus + draft_bonus
        
        return {
            'player_name': row['player_name'],
            'final_score': final_score,
            'individual': indiv_score,
            'draft': draft_total,
            'penalty': penalty,
            'grinder_bonus': grinder_bonus,
            'drafts_attended': drafts_attended,
            'undefeated_rounds': undefeated_rounds
        }
    
    # Generate leaderboard
    leaderboard = pd.DataFrame([process_player(row) for _, row in df.iterrows()])
    leaderboard = leaderboard.sort_values('final_score', ascending=False)
    leaderboard.insert(0, 'rank', range(1, len(leaderboard)+1))
    
    return leaderboard[['rank', 'player_name', 'final_score', 'individual', 
                       'draft', 'penalty', 'grinder_bonus', 'drafts_attended',
                       'undefeated_rounds']]

# Example usage
if __name__ == "__main__":
    leaderboard = calculate_leaderboard('league_scores.xlsx')
    print(leaderboard)
    leaderboard.to_excel('final_leaderboard.xlsx', index=False)
