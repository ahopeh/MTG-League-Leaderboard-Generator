import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.colors import LinearSegmentedColormap
import seaborn as sns
from ipywidgets import interact, Dropdown

# Custom Styling
plt.style.use('seaborn-darkgrid')
colors = ['#4C72B0', '#DD8452', '#55A868', '#C44E52', '#8172B3', '#937860', '#DA8BC3', '#8C8C8C', '#CCB974', '#64B5CD']
cmap = LinearSegmentedColormap.from_list('custom', colors[:3])

def load_and_process_data(individual_path, draft_path):
    # Load Excel files
    indiv_df = pd.read_excel(individual_path)
    draft_df = pd.read_excel(draft_path)
    
    # Process Individual Games
    indiv_scores = indiv_df.groupby('player').agg(
        games_played=('game_id', 'count'),
        individual_points=('points', 'sum'),
        max_possible=('pod_size', 'sum')
    ).reset_index()
    
    # Process Draft Events
    draft_scores = draft_df.groupby('player').agg(
        drafts_attended=('event_id', 'nunique'),
        draft_points=('points', 'sum'),
        max_draft=('max_possible', 'max'),
        undefeated_rounds=('undefeated', 'sum')
    ).reset_index()
    
    # Merge and calculate final scores
    merged = pd.merge(indiv_scores, draft_scores, on='player', how='outer').fillna(0)
    
    # Apply scoring formula
    merged['penalty'] = np.where(
        merged['games_played'] < 15,
        (15 - merged['games_played']) * 3,
        0
    )
    
    highest_max = merged['max_possible'].max()
    
    merged['final_score'] = (
        (merged['individual_points'] - merged['penalty']) / merged['max_possible'] +
        merged['draft_points'] / merged['max_draft'] +
        merged['individual_points'] / highest_max +
        (merged['draft_points'] / merged['max_draft']) * 
        (0.1 + 0.07 * merged['drafts_attended']) * merged['undefeated_rounds']
    )
    
    # Rank players
    leaderboard = merged.sort_values('final_score', ascending=False)
    leaderboard['rank'] = range(1, len(leaderboard)+1)
    
    return leaderboard, indiv_df, draft_df

def plot_leaderboard(leaderboard):
    plt.figure(figsize=(12, 8))
    top_players = leaderboard.head(10)
    sns.barplot(x='final_score', y='player', data=top_players, palette=colors)
    plt.title('Top 10 Players - Final Scores', fontsize=16)
    plt.xlabel('Final Score', fontsize=14)
    plt.ylabel('Player', fontsize=14)
    plt.show()

def player_dashboard(player, leaderboard, indiv_df, draft_df):
    player_data = leaderboard[leaderboard['player'] == player].iloc[0]
    
    # Create figure
    fig, axes = plt.subplots(2, 2, figsize=(15, 12))
    fig.suptitle(f'Player Dashboard: {player}', fontsize=18)
    
    # Score Breakdown
    components = pd.Series({
        'Individual': player_data['individual_points'] / player_data['max_possible'],
        'Draft': player_data['draft_points'] / player_data['max_draft'],
        'Grinder Bonus': player_data['individual_points'] / leaderboard['max_possible'].max(),
        'Undefeated Bonus': (player_data['draft_points'] / player_data['max_draft']) * 
                           (0.1 + 0.07 * player_data['drafts_attended']) * 
                           player_data['undefeated_rounds']
    })
    components.plot.pie(ax=axes[0,0], autopct='%1.1f%%', colors=colors, startangle=90)
    axes[0,0].set_title('Score Composition', fontsize=14)
    
    # Weekly Performance
    weekly = indiv_df[indiv_df['player'] == player].groupby(
        pd.to_datetime(indiv_df['date']).dt.isocalendar().week
    )['points'].sum()
    weekly.plot(ax=axes[0,1], marker='o', color=colors[1], linewidth=2.5)
    axes[0,1].set_title('Weekly Point Progression', fontsize=14)
    axes[0,1].set_xlabel('Week Number')
    axes[0,1].set_ylabel('Points Earned')
    
    # Draft Performance
    draft_perf = draft_df[draft_df['player'] == player].groupby('event_id')['points'].sum()
    draft_perf.plot.bar(ax=axes[1,0], color=colors[2])
    axes[1,0].set_title('Draft Event Performance', fontsize=14)
    axes[1,0].set_xlabel('Draft Event')
    axes[1,0].set_ylabel('Points Earned')
    
    # Pod Size Distribution
    pod_sizes = indiv_df[indiv_df['player'] == player]['pod_size'].value_counts()
    pod_sizes.plot.pie(ax=axes[1,1], autopct='%1.1f%%', colors=colors[3:6], startangle=90)
    axes[1,1].set_title('Pod Size Distribution', fontsize=14)
    
    plt.tight_layout()
    plt.show()

def interactive_dashboard(leaderboard, indiv_df, draft_df):
    players = leaderboard['player'].tolist()
    
    @interact(Player=Dropdown(options=players, description='Select Player:'))
    def show_dashboard(Player):
        player_dashboard(Player, leaderboard, indiv_df, draft_df)

def main():
    # Load data
    leaderboard, indiv_df, draft_df = load_and_process_data(
        'individual_results.xlsx',
        'draft_results.xlsx'
    )
    
    # Display leaderboard
    print("🏆 Current Leaderboard 🏆")
    display(leaderboard[['rank', 'player', 'final_score', 
                        'individual_points', 'draft_points',
                        'undefeated_rounds', 'penalty']])
    
    # Visualizations
    plot_leaderboard(leaderboard)
    interactive_dashboard(leaderboard, indiv_df, draft_df)
    
    # Save results
    leaderboard.to_excel('final_leaderboard.xlsx', index=False)
    print("\nResults saved to 'final_leaderboard.xlsx'")

if __name__ == "__main__":
    main()
