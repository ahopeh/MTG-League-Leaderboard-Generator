import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from collections import defaultdict
from datetime import datetime

# Configuration
plt.style.use('ggplot')
COLORS = ['#4E79A7', '#F28E2B', '#E15759', '#76B7B2', '#59A14F', '#EDC948', '#B07AA1', '#FF9DA7', '#9C755F', '#BAB0AC']

def calculate_leaderboard(individual_path, draft_path):
    # ... (keep the same calculation functions as before) ...
    return leaderboard

def weekly_tracking(individual_path):
    df = pd.read_csv(individual_path)
    df['date'] = pd.to_datetime(df['game_id'].astype(str).str[:8], format='%Y%m%d', errors='coerce')
    df['week'] = df['date'].dt.isocalendar().week
    
    weekly = df.groupby(['player', 'week']).agg(
        games=('game_id', 'count'),
        points=('points', 'sum')
    ).reset_index()
    
    return weekly.pivot(index='week', columns='player', values='points').fillna(0)

def head_to_head(individual_path, player1, player2):
    df = pd.read_csv(individual_path)
    shared_games = df.groupby('game_id').filter(
        lambda x: player1 in x['player'].values and player2 in x['player'].values
    )
    
    results = {
        'shared_games': len(shared_games['game_id'].unique()),
        f'{player1}_wins': sum(
            (shared_games['player'] == player1) & (shared_games['placement'] == 1)
        ),
        f'{player2}_wins': sum(
            (shared_games['player'] == player2) & (shared_games['placement'] == 1)
        ),
        'both_lost': sum(
            (shared_games['player'].isin([player1, player2])) & 
            (shared_games['placement'] > 1)
        ) // 2  # Since both appear in each game
    }
    return results

def visualize_data(leaderboard, player=None):
    if player:
        # Player progression
        fig, ax = plt.subplots(2, 1, figsize=(10, 8))
        
        # Score components
        player_data = leaderboard[leaderboard['player'] == player].iloc[0]
        components = {
            'Individual': player_data['individual_points'],
            'Draft': player_data['draft_points'],
            'Grinder Bonus': player_data['grinder_bonus'],
            'Penalty': -player_data['penalty']
        }
        ax[0].bar(components.keys(), components.values(), color=COLORS[:4])
        ax[0].set_title(f'{player} - Score Breakdown')
        
        # Weekly performance
        weekly = weekly_tracking("individual_results.csv")
        ax[1].plot(weekly.index, weekly[player], marker='o', color=COLORS[4])
        ax[1].set_title(f'{player} - Weekly Points')
        ax[1].set_xlabel('Week')
        ax[1].set_ylabel('Points')
        
    else:
        # Leaderboard visualization
        plt.figure(figsize=(12, 6))
        top_players = leaderboard.head(10)
        bars = plt.barh(
            top_players['player'],
            top_players['final_score'],
            color=COLORS
        )
        plt.title('Top 10 Players')
        plt.xlabel('Final Score')
        
        # Add score labels
        for bar in bars:
            width = bar.get_width()
            plt.text(width-5, bar.get_y() + bar.get_height()/2,
                    f'{width:.1f}', ha='right', va='center')
    
    plt.tight_layout()
    plt.show()

def main():
    print("⚔️  Welcome to the Gaming League Analyzer  ⚔️\n")
    
    # Load data
    leaderboard = calculate_leaderboard(
        "individual_results.csv",
        "draft_results.csv"
    )
    
    while True:
        print("\nOptions:")
        print("1. View Leaderboard")
        print("2. Weekly Score Tracking")
        print("3. Head-to-Head Comparison")
        print("4. Player Visualization")
        print("5. Exit")
        
        choice = input("\nEnter your choice (1-5): ")
        
        if choice == '1':
            print("\nCurrent Leaderboard:")
            print(leaderboard[['rank', 'player', 'final_score']].to_string(index=False))
            
        elif choice == '2':
            weekly = weekly_tracking("individual_results.csv")
            player = input("Enter player name (or leave blank for all): ")
            
            if player and player in weekly.columns:
                plt.figure(figsize=(10, 5))
                plt.plot(weekly.index, weekly[player], marker='o', color=COLORS[0])
                plt.title(f'{player} - Weekly Points')
                plt.xlabel('Week')
                plt.ylabel('Points')
                plt.grid(True)
                plt.show()
            else:
                print("\nWeekly Summary:")
                print(weekly.tail(4).to_string())  # Last 4 weeks
        
        elif choice == '3':
            p1 = input("Enter first player name: ")
            p2 = input("Enter second player name: ")
            
            if p1 in leaderboard['player'].values and p2 in leaderboard['player'].values:
                results = head_to_head("individual_results.csv", p1, p2)
                
                # Visualization
                fig, ax = plt.subplots(figsize=(8, 5))
                matches = [results[f'{p1}_wins'], results[f'{p2}_wins'], results['both_lost']]
                labels = [f'{p1} Wins', f'{p2} Wins', 'Both Lost']
                ax.pie(matches, labels=labels, autopct='%1.1f%%', 
                       colors=COLORS[:3], startangle=90)
                ax.set_title(f'Head-to-Head: {p1} vs {p2}\n(Total Games: {results["shared_games"]})')
                plt.show()
            else:
                print("One or both players not found!")
        
        elif choice == '4':
            player = input("Enter player name: ")
            if player in leaderboard['player'].values:
                visualize_data(leaderboard, player)
            else:
                print("Player not found!")
        
        elif choice == '5':
            print("Goodbye!")
            break
            
        else:
            print("Invalid choice. Please try again.")

if __name__ == "__main__":
    main()
